'''
메인 루틴 <-> 서브 루틴
코루틴
    일반 함수를 호출하면 한 번만 실행할 수 있다.
    코루틴은 코드를 여러 번 실행할 수 있다.
        코드를 실행하는 지점 = 진입점 (entry)
    코루틴은 진입점이 여러 개인 함수
    코루틴은 제너레이터의 특별한 형태
        제너레이터는 yield로 값을 발생시킨다.
        코루틴은 yield로 값을 받아올 수 있다.
            코루틴에 값을 보내면서 코루틴을 실행할 때
                send 메서드를 사용한다.
                코루틴.send(값)
                변수 = (yield)
'''

def number_coroutine():
    while True: # 코루틴을 종료하지 않고 계속 유지시키기 위해서
        # 무한 루프를 사용한다.
        x = (yield)
        print(x)

co = number_coroutine()
next(co) # 코루틴을 최초로 실행한다.
# 코루틴이 yield에서 대기한다.

co.send(1) # 메인루틴에서 1을 보내면 코루틴을 대기 상태에서 풀린다.
# 그리고 다시 yield에서 대기한다.
co.send(2)
co.send(3)

'''
next 함수 (__next__ 메서드)로 코루틴의 코드를 최초로 실행한다.
send 메서드로 코루틴에 값을 보내면서 대기하고 있던 코루틴의 
코드를 다시 실행한다.

지금까지는 코루틴의 코드를 최초로 실행할 때 next 함수를 사용했지만
코루틴 객체.send(None)을 호출해도 코루틴의 코드를 최초로 실행할 
수 있다. 
'''
