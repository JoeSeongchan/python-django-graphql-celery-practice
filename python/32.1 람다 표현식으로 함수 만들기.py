'''
람다 표현식으로 익명 함수를 만들 수 있다.
람다 표현식은 식 형태로 되어 있다.
'''

def plus_ten(x):
    return x+10
plus_ten(10)

lambda x: x+10 # 람다 표현식은 이름이 없는 함수를 만든다.
plus_ten = lambda x: x+10
plus_ten(10)

'''
람다 표현식은 변수에 할당하지 않고 바로 호출할 수 있다.
'''
print((lambda x: x+10)(1))

'''
람다 표현식 안에서 변수를 만들 수는 없다. 
람다는 스택 메모리를 사용하지 않기 때문이다.
    - 조사 필요
'''
def plus_ten(x):
    return x+10

print(list(map(plus_ten,[1,2,3])))
'''
지금까지는 map 함수의 인수로 int, float, str를 넣었다.
그런데 위 코드처럼 함수를 넣을 수 있다. 
간단한 함수라면 람다 표현식으로 표현할 수 있다. 
'''
print(list(map(lambda x:x+10,[1,2,3])))
'''
람다 표현식으로 매개변수가 없는 함수를 만들 때는 
lambda 뒤에 아무것도 지정하지 않고 콜론을 붙인다. 
콜론 뒤에는 반드시 반환할 값이 있어야 한다. 
왜냐하면 표현식은 무조건 값으로 평가 받아야 하기 때문이다. 
'''
print(list(map(lambda _:10,[1,2,3])))

